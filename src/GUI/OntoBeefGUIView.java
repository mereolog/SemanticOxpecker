/*
 * OntoBeefGUIView.java
 */

package GUI;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.util.Hashtable;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.DefaultListModel;

import java.awt.*;



/**
 * The application's main frame.
 */
public class OntoBeefGUIView extends FrameView {
    
    String questionText;
        
    DefaultListModel answersModel = new DefaultListModel();
    
    boolean foundAnswer=false;
    
    
    public OntoBeefGUIView(SingleFrameApplication app) {
        super(app);
        
        initComponents();
    }

    public static SplashScreen inititSplash()
    {
        final SplashScreen splash = SplashScreen.getSplashScreen();
        if (splash == null) {
            System.out.println("SplashScreen.getSplashScreen() returned null");
            return null;
        }
        
        return splash;
    
    }
    
    static Graphics2D inititSplashFrame(SplashScreen splash)
    {
        
        Graphics2D g = splash.createGraphics();
        
        
        return g;
    
    }
      
    static void renderSplashFrame(String text, Graphics2D g)
    {
        
        //g.drawString("BAKOJAD STATYSTYCZNY", 100, 150);
        g.setComposite(AlphaComposite.Clear);
        g.fillRect(10,10,400,270);
        g.setPaintMode();
        g.setColor(Color.BLACK);
        
        g.drawString(text, 20, 250);
        
    }
    
    static void killSplash(SplashScreen splash)
    {
        splash.close();
    }
    
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = OntoBeefApplication.getApplication().getMainFrame();
            aboutBox = new OntoBeefGUIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        OntoBeefApplication.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        answers = new javax.swing.JList(this.answersModel);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        foundPapersNumberLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        titleAnswer = new javax.swing.JTextField();
        authorAnswer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        publicationAnswer = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfidfOn = new javax.swing.JRadioButton();
        similaritySlider = new javax.swing.JSlider();
        similaritySlider.setLabelTable(this.createSliderTableForSimil());
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        loadExpander = new javax.swing.JMenuItem();
        otherMenu = new javax.swing.JMenu();
        sparqlMenu = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        question.setColumns(20);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(GUI.OntoBeefApplication.class).getContext().getResourceMap(OntoBeefGUIView.class);
        question.setFont(resourceMap.getFont("question.font")); // NOI18N
        question.setRows(5);
        question.setText(resourceMap.getString("question.text")); // NOI18N
        question.setToolTipText(resourceMap.getString("question.toolTipText")); // NOI18N
        question.setName("question"); // NOI18N
        jScrollPane1.setViewportView(question);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        answers.setFont(resourceMap.getFont("answers.font")); // NOI18N
        answers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        answers.setToolTipText(resourceMap.getString("answers.toolTipText")); // NOI18N
        answers.setName("answers");
        answers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                answersMouseClicked(evt);
            }
        });
        answers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                answersValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(answers);
        answers.getAccessibleContext().setAccessibleParent(mainPanel);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        foundPapersNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        foundPapersNumberLabel.setText(resourceMap.getString("foundPapersNumberLabel.text")); // NOI18N
        foundPapersNumberLabel.setName("foundPapersNumberLabel"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        titleAnswer.setFont(resourceMap.getFont("titleAnswer.font")); // NOI18N
        titleAnswer.setText(resourceMap.getString("titleAnswer.text")); // NOI18N
        titleAnswer.setToolTipText(resourceMap.getString("titleAnswer.toolTipText")); // NOI18N
        titleAnswer.setName("titleAnswer"); // NOI18N

        authorAnswer.setFont(resourceMap.getFont("authorAnswer.font")); // NOI18N
        authorAnswer.setText(resourceMap.getString("authorAnswer.text")); // NOI18N
        authorAnswer.setName("authorAnswer"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        publicationAnswer.setFont(resourceMap.getFont("publicationAnswer.font")); // NOI18N
        publicationAnswer.setText(resourceMap.getString("publicationAnswer.text")); // NOI18N
        publicationAnswer.setName("publicationAnswer"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        tfidfOn.setText(resourceMap.getString("tfidfOn.text")); // NOI18N
        tfidfOn.setToolTipText(resourceMap.getString("tfidfOn.toolTipText")); // NOI18N
        tfidfOn.setName("tfidfOn"); // NOI18N
        tfidfOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfidfOnActionPerformed(evt);
            }
        });

        similaritySlider.setMajorTickSpacing(50);
        similaritySlider.setMinorTickSpacing(10);
        similaritySlider.setPaintLabels(true);
        similaritySlider.setPaintTicks(true);
        similaritySlider.setSnapToTicks(true);
        similaritySlider.setToolTipText(resourceMap.getString("similaritySlider.toolTipText")); // NOI18N
        similaritySlider.setName("similaritySlider"); // NOI18N
        similaritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                similaritySliderStateChanged(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel2))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tfidfOn)
                            .add(jLabel1)
                            .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, mainPanelLayout.createSequentialGroup()
                                    .add(460, 460, 460)
                                    .add(jLabel7)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 470, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1061, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(similaritySlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1101, Short.MAX_VALUE))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(514, 514, 514)
                        .add(jButton1))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(399, 399, 399)
                        .add(foundPapersNumberLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 304, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(0, 0, 0))
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(466, 466, 466)
                        .add(jButton2))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel6))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(publicationAnswer)
                            .add(authorAnswer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
                            .add(titleAnswer))))
                .addContainerGap(34, Short.MAX_VALUE))
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1067, Short.MAX_VALUE)
                .add(34, 34, 34))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(tfidfOn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(similaritySlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel7)
                .add(28, 28, 28)
                .add(jButton1)
                .add(18, 18, 18)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(foundPapersNumberLabel)
                .add(24, 24, 24)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3)
                .add(30, 30, 30)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(titleAnswer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(authorAnswer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(publicationAnswer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .add(28, 28, 28)
                .add(jButton2)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(GUI.OntoBeefApplication.class).getContext().getActionMap(OntoBeefGUIView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        loadExpander.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK));
        loadExpander.setText(resourceMap.getString("loadExpander.text")); // NOI18N
        loadExpander.setName("loadExpander"); // NOI18N
        loadExpander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExpanderActionPerformed(evt);
            }
        });
        fileMenu.add(loadExpander);

        menuBar.add(fileMenu);

        otherMenu.setText(resourceMap.getString("otherMenu.text")); // NOI18N
        otherMenu.setName("otherMenu"); // NOI18N

        sparqlMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK));
        sparqlMenu.setText(resourceMap.getString("sparqlMenu.text")); // NOI18N
        sparqlMenu.setName("sparqlMenu"); // NOI18N
        sparqlMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sparqlMenuActionPerformed(evt);
            }
        });
        otherMenu.add(sparqlMenu);

        menuBar.add(otherMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    public Hashtable<Integer, javax.swing.JLabel> createSliderTableForSimil()
    {
        Hashtable<Integer, javax.swing.JLabel> table = new Hashtable<Integer, javax.swing.JLabel>();
        table.put(0, new javax.swing.JLabel("Maksymalne"));
        table.put(50, new javax.swing.JLabel(""));
        table.put(100, new javax.swing.JLabel("Minimalne"));
        
        return table;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        this.answersModel.removeAllElements();
        this.authorAnswer.setText("");
        this.titleAnswer.setText("");
        this.publicationAnswer.setText("");
        
        //OntoBeefGUIApp.paperTitleToPaperMap
        
        OntoBeefApplication.search=OntoBeefApplication.findAnswer(question.getText(), OntoBeefApplication.retrievedTFIDF, OntoBeefApplication.expanderModel);
        //answers.setListData(OntoBeefGUIApp.search.answerSet.toArray());
        
        int answerSize = OntoBeefApplication.search.answerSet.size();
        int sizeForGrammar = answerSize;
        
        if (answerSize>1000) sizeForGrammar %= 1000;
        if (answerSize>100) sizeForGrammar %= 100;
        if (answerSize>10) sizeForGrammar %= 10;
        
        //System.out.println(answerSize);
        //System.out.println(sizeForGrammar);
        //System.out.println("***");
        
        switch (answerSize)
        {
            case 0: 
            {
                foundPapersNumberLabel.setText("Nic nie znalazłem");
                break;
            }
            case 1: foundPapersNumberLabel.setText("Znalazłem tylko jeden artykuł"); break;
            default :
            {
                if (answerSize>5 && answerSize<20) foundPapersNumberLabel.setText("Znalazłem "+ answerSize+" artykułów");
                else
                {
                    if (sizeForGrammar<=1) foundPapersNumberLabel.setText("Znalazłem "+ answerSize+" artykułów");
                    if (sizeForGrammar>1 && sizeForGrammar<5) foundPapersNumberLabel.setText("Znalazłem "+ answerSize+" artykuły");
                    if (sizeForGrammar>=5) foundPapersNumberLabel.setText("Znalazłem "+ answerSize+" artykułów");
                }
                    
            }
        }
            
        if (answerSize>0) 
            for (Prepare.Paper foundPaper : OntoBeefApplication.search.answerSet)
            {
                this.answersModel.addElement(foundPaper.paperTitle);
                this.titleAnswer.setText(foundPaper.paperTitle);
                this.authorAnswer.setText(foundPaper.paperAuthor);
                this.publicationAnswer.setText(foundPaper.publication);
                }
            foundAnswer=true;
            //System.out.println(OntoBeefGUIApp.search.answerSet.size());
            answers.updateUI();
          
            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void answersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_answersMouseClicked
        
        
        if (evt.getClickCount() >1 && this.foundAnswer)
        {
            String title=(String)this.answers.getSelectedValue();
            
            PaperDetails newPaperWindow = new PaperDetails( title, //
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).paperAuthor, //
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).publication, //
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).year,
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).volume,
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).pages, //
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).paperAbstract,//
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).theses,//
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).paperAbstractTranslation,
                                                            OntoBeefApplication.paperTitleToPaperMap.get(title).keyword////
                                                            );
            
            newPaperWindow.setVisible(true);
        }
        
    }//GEN-LAST:event_answersMouseClicked

    private void answersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_answersValueChanged
        if (this.foundAnswer)
        {
            String title = (String)answers.getSelectedValue();
        
            this.titleAnswer.setText(title);
            if (title != null) this.authorAnswer.setText(OntoBeefApplication.paperTitleToPaperMap.get(title).paperAuthor);
            if (title != null) this.publicationAnswer.setText(OntoBeefApplication.paperTitleToPaperMap.get(title).publication);
        }    
    }//GEN-LAST:event_answersValueChanged

    private void tfidfOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfidfOnActionPerformed
        OntoBeefApplication.findBySimilarity=this.tfidfOn.isSelected();
        
        //System.out.println(this.tfidfOn.isSelected());
    }//GEN-LAST:event_tfidfOnActionPerformed

    private void similaritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_similaritySliderStateChanged
        if (!this.similaritySlider.getValueIsAdjusting())
        {
            OntoBeefApplication.similarityTreshold=(double) (this.similaritySlider.getValue())/100;
            
           // System.out.println(OntoBeefGUIApp.similarityMeasure);
        }
    }//GEN-LAST:event_similaritySliderStateChanged

    private void loadExpanderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadExpanderActionPerformed
    LoadExpanderFrame newExpanderFrame = new LoadExpanderFrame();
    newExpanderFrame.setVisible(true);
    }//GEN-LAST:event_loadExpanderActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if (OntoBeefApplication.search.answerSet.size()>0)
        {
            SaveBib newBib = new SaveBib();
            //newBib.setVisible(true);
            newBib.dispose();
        }      
    }//GEN-LAST:event_jButton2ActionPerformed

    private void sparqlMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sparqlMenuActionPerformed
        SPARQL newSparqlquery = new SPARQL();
        newSparqlquery.setVisible(true);
    }//GEN-LAST:event_sparqlMenuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList answers;
    private javax.swing.JTextField authorAnswer;
    private javax.swing.JLabel foundPapersNumberLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem loadExpander;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu otherMenu;
    private javax.swing.JTextField publicationAnswer;
    private javax.swing.JTextArea question;
    public javax.swing.JSlider similaritySlider;
    private javax.swing.JMenuItem sparqlMenu;
    private javax.swing.JRadioButton tfidfOn;
    private javax.swing.JTextField titleAnswer;
    // End of variables declaration//GEN-END:variables

   

    private JDialog aboutBox;
}
